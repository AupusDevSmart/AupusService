// src/services/plantas.services.ts - ALTERNATIVA COM TIPOS LOCAIS
import { api } from '@/config/api';

// ‚úÖ TIPO LOCAL: PaginatedResponse (se n√£o quiser modificar base.ts)
export interface PaginatedResponse<T> {
  data: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

// ‚úÖ INTERFACES DE REQUEST/RESPONSE
export interface CreatePlantaRequest {
  nome: string;
  cnpj: string;
  proprietarioId: string;
  horarioFuncionamento: string;
  localizacao: string;
  endereco: {
    logradouro: string;
    bairro: string;
    cidade: string;
    uf: string;
    cep: string;
  };
}

export interface UpdatePlantaRequest {
  nome?: string;
  cnpj?: string;
  proprietarioId?: string;
  horarioFuncionamento?: string;
  localizacao?: string;
  endereco?: {
    logradouro?: string;
    bairro?: string;
    cidade?: string;
    uf?: string;
    cep?: string;
  };
}

export interface PlantaResponse {
  id: string;
  nome: string;
  cnpj: string;
  localizacao: string;
  horarioFuncionamento: string;
  endereco: {
    logradouro: string;
    bairro: string;
    cidade: string;
    uf: string;
    cep: string;
  };
  proprietarioId: string;
  proprietario?: ProprietarioBasico;
  criadoEm: string;
  atualizadoEm: string;
}

// ‚úÖ Interface ProprietarioBasico
export interface ProprietarioBasico {
  id: string;
  nome: string;
  cpf_cnpj: string;
  tipo: 'pessoa_fisica' | 'pessoa_juridica';
}

export interface FindAllPlantasParams {
  page?: number;
  limit?: number;
  search?: string;
  proprietarioId?: string;
  orderBy?: 'nome' | 'cnpj' | 'localizacao' | 'cidade' | 'criadoEm' | 'proprietario';
  orderDirection?: 'asc' | 'desc';
}

// ‚úÖ SERVICE CLASS ADAPTADO
export class PlantasService {
  // ‚úÖ Endpoint das plantas (sem base URL)
  private static readonly ENDPOINT = '/plantas';

  // ‚úÖ M√âTODO: Listar plantas com filtros e pagina√ß√£o
  static async getAllPlantas(params: FindAllPlantasParams = {}): Promise<PaginatedResponse<PlantaResponse>> {
    // console.log('üè≠ [PLANTAS SERVICE] Buscando plantas com par√¢metros:', params);

    try {
      // ‚úÖ Usando sua inst√¢ncia do axios com par√¢metros
      const response = await api.get<PaginatedResponse<PlantaResponse>>(this.ENDPOINT, {
        params: {
          page: params.page,
          limit: params.limit,
          search: params.search?.trim() || undefined,
          proprietarioId: params.proprietarioId !== 'all' ? params.proprietarioId : undefined,
          orderBy: params.orderBy,
          orderDirection: params.orderDirection,
        }
      });

      // console.log('‚úÖ [PLANTAS SERVICE] Plantas carregadas:', {
      //   total: response.data.pagination.total,
      //   page: response.data.pagination.page,
      //   count: response.data.data.length
      // });

      return response.data;

    } catch (error: any) {
      // console.error('‚ùå [PLANTAS SERVICE] Erro ao buscar plantas:', error);
      throw new Error(error.response?.data?.message || error.message || 'Erro ao carregar lista de plantas');
    }
  }

  // ‚úÖ M√âTODO: Buscar planta espec√≠fica por ID
  static async getPlanta(id: string): Promise<PlantaResponse> {
    // console.log('üîç [PLANTAS SERVICE] Buscando planta:', id);

    try {
      const response = await api.get<PlantaResponse>(`${this.ENDPOINT}/${id}`);

      // console.log('‚úÖ [PLANTAS SERVICE] Planta encontrada:', response.data.nome);
      return response.data;

    } catch (error: any) {
      // console.error('‚ùå [PLANTAS SERVICE] Erro ao buscar planta:', error);
      
      if (error.response?.status === 404) {
        throw new Error('Planta n√£o encontrada');
      }
      
      throw new Error(error.response?.data?.message || error.message || 'Erro ao carregar dados da planta');
    }
  }

  // ‚úÖ M√âTODO: Criar nova planta
  static async createPlanta(data: CreatePlantaRequest): Promise<PlantaResponse> {
    // console.log('üè≠ [PLANTAS SERVICE] Criando nova planta:', data.nome);

    try {
      const response = await api.post<PlantaResponse>(this.ENDPOINT, data);

      // console.log('‚úÖ [PLANTAS SERVICE] Planta criada com sucesso:', response.data.id);
      return response.data;

    } catch (error: any) {
      // console.error('‚ùå [PLANTAS SERVICE] Erro ao criar planta:', error);
      
      // Mapear erros espec√≠ficos
      if (error.response?.status === 409) {
        throw new Error('CNPJ j√° cadastrado no sistema');
      }
      
      if (error.response?.status === 404) {
        throw new Error('Propriet√°rio n√£o encontrado ou inativo');
      }
      
      if (error.response?.status === 400) {
        throw new Error(error.response?.data?.message || 'Dados inv√°lidos para cria√ß√£o da planta');
      }
      
      throw new Error(error.response?.data?.message || error.message || 'Erro interno ao criar planta');
    }
  }

  // ‚úÖ M√âTODO: Atualizar planta existente
  static async updatePlanta(id: string, data: UpdatePlantaRequest): Promise<PlantaResponse> {
    // console.log('üîÑ [PLANTAS SERVICE] Atualizando planta:', id);

    try {
      const response = await api.put<PlantaResponse>(`${this.ENDPOINT}/${id}`, data);

      // console.log('‚úÖ [PLANTAS SERVICE] Planta atualizada com sucesso:', response.data.nome);
      return response.data;

    } catch (error: any) {
      // console.error('‚ùå [PLANTAS SERVICE] Erro ao atualizar planta:', error);
      
      // Mapear erros espec√≠ficos
      if (error.response?.status === 404) {
        throw new Error('Planta n√£o encontrada');
      }
      
      if (error.response?.status === 409) {
        throw new Error('CNPJ j√° cadastrado por outra planta');
      }
      
      if (error.response?.status === 400) {
        throw new Error(error.response?.data?.message || 'Dados inv√°lidos para atualiza√ß√£o da planta');
      }
      
      throw new Error(error.response?.data?.message || error.message || 'Erro interno ao atualizar planta');
    }
  }

  // ‚úÖ M√âTODO: Buscar propriet√°rios dispon√≠veis
  static async getProprietarios(): Promise<ProprietarioBasico[]> {
    // console.log('üë• [PLANTAS SERVICE] Buscando propriet√°rios dispon√≠veis');

    try {
      const response = await api.get<ProprietarioBasico[]>(`${this.ENDPOINT}/proprietarios`);

      // console.log('‚úÖ [PLANTAS SERVICE] Propriet√°rios carregados:', response.data.length);
      return response.data;

    } catch (error: any) {
      // console.error('‚ùå [PLANTAS SERVICE] Erro ao buscar propriet√°rios:', error);
      throw new Error(error.response?.data?.message || error.message || 'Erro ao carregar lista de propriet√°rios');
    }
  }

  // ‚úÖ M√âTODO UTILIT√ÅRIO: Validar CNPJ
  static validateCNPJ(cnpj: string): boolean {
    const cleanCNPJ = cnpj.replace(/\D/g, '');
    return cleanCNPJ.length === 14;
  }

  // ‚úÖ M√âTODO UTILIT√ÅRIO: Formatar CNPJ
  static formatCNPJ(cnpj: string): string {
    const cleanCNPJ = cnpj.replace(/\D/g, '');
    if (cleanCNPJ.length === 14) {
      return cleanCNPJ.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, '$1.$2.$3/$4-$5');
    }
    return cnpj;
  }
}